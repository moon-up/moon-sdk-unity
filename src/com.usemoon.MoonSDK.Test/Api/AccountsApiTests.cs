/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using com.usemoon.MoonSDK.Client;
using com.usemoon.MoonSDK.Api;
// uncomment below to import models
//using com.usemoon.MoonSDK.Model;

namespace com.usemoon.MoonSDK.Test.Api
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountsApiTests : IDisposable
    {
        private AccountsApi instance;

        public AccountsApiTests()
        {
            instance = new AccountsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AccountsApi
            //Assert.IsType<AccountsApi>(instance);
        }

        /// <summary>
        /// Test BroadcastTx
        /// </summary>
        [Test]
        public void BroadcastTxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string accountName = null;
            //BroadcastInput broadcastInput = null;
            //var response = instance.BroadcastTx(authorization, accountName, broadcastInput);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test CreateAccount
        /// </summary>
        [Test]
        public void CreateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //CreateAccountInput createAccountInput = null;
            //var response = instance.CreateAccount(authorization, createAccountInput);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test DeleteAccount
        /// </summary>
        [Test]
        public void DeleteAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string accountName = null;
            //var response = instance.DeleteAccount(authorization, accountName);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test DeployContract
        /// </summary>
        [Test]
        public void DeployContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string accountName = null;
            //DeployInput deployInput = null;
            //var response = instance.DeployContract(authorization, accountName, deployInput);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test GetAccount
        /// </summary>
        [Test]
        public void GetAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string accountName = null;
            //var response = instance.GetAccount(authorization, accountName);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test GetBalance
        /// </summary>
        [Test]
        public void GetBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string authorization = null;
            //string chainId = null;
            //var response = instance.GetBalance(accountName, authorization, chainId);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test GetNonce
        /// </summary>
        [Test]
        public void GetNonceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string authorization = null;
            //var response = instance.GetNonce(accountName, authorization);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test ListAccounts
        /// </summary>
        [Test]
        public void ListAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //var response = instance.ListAccounts(authorization);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test SignMessage
        /// </summary>
        [Test]
        public void SignMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string authorization = null;
            //SignMessage signMessage = null;
            //var response = instance.SignMessage(accountName, authorization, signMessage);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test SignTransaction
        /// </summary>
        [Test]
        public void SignTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string authorization = null;
            //InputBody inputBody = null;
            //var response = instance.SignTransaction(accountName, authorization, inputBody);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test SignTypedData
        /// </summary>
        [Test]
        public void SignTypedDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string authorization = null;
            //SignTypedData signTypedData = null;
            //var response = instance.SignTypedData(accountName, authorization, signTypedData);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test TransferEth
        /// </summary>
        [Test]
        public void TransferEthTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string authorization = null;
            //InputBody inputBody = null;
            //var response = instance.TransferEth(accountName, authorization, inputBody);
            //Assert.IsType<AccountControllerResponse>(response);
        }
    }
}
