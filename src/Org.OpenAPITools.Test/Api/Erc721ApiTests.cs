/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing Erc721Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class Erc721ApiTests : IDisposable
    {
        private Erc721Api instance;

        public Erc721ApiTests()
        {
            instance = new Erc721Api();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Erc721Api
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' Erc721Api
            //Assert.IsType<Erc721Api>(instance);
        }

        /// <summary>
        /// Test Approve
        /// </summary>
        [Fact]
        public void ApproveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string name = null;
            //Erc721Request erc721Request = null;
            //var response = instance.Approve(authorization, name, erc721Request);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test BalanceOf
        /// </summary>
        [Fact]
        public void BalanceOfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string name = null;
            //Erc721Request erc721Request = null;
            //var response = instance.BalanceOf(authorization, name, erc721Request);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test GetApproved
        /// </summary>
        [Fact]
        public void GetApprovedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string name = null;
            //Erc721Request erc721Request = null;
            //var response = instance.GetApproved(authorization, name, erc721Request);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test IsApprovedForAll
        /// </summary>
        [Fact]
        public void IsApprovedForAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string name = null;
            //Erc721Request erc721Request = null;
            //var response = instance.IsApprovedForAll(authorization, name, erc721Request);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test Name
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string name = null;
            //Erc721Request erc721Request = null;
            //var response = instance.Name(authorization, name, erc721Request);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test OwnerOf
        /// </summary>
        [Fact]
        public void OwnerOfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string name = null;
            //Erc721Request erc721Request = null;
            //var response = instance.OwnerOf(authorization, name, erc721Request);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test SafeTransferFrom
        /// </summary>
        [Fact]
        public void SafeTransferFromTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string name = null;
            //Erc721Request erc721Request = null;
            //var response = instance.SafeTransferFrom(authorization, name, erc721Request);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test SetApprovalForAll
        /// </summary>
        [Fact]
        public void SetApprovalForAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string name = null;
            //Erc721Request erc721Request = null;
            //var response = instance.SetApprovalForAll(authorization, name, erc721Request);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test Symbol
        /// </summary>
        [Fact]
        public void SymbolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string name = null;
            //Erc721Request erc721Request = null;
            //var response = instance.Symbol(authorization, name, erc721Request);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test TokenUri
        /// </summary>
        [Fact]
        public void TokenUriTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string name = null;
            //Erc721Request erc721Request = null;
            //var response = instance.TokenUri(authorization, name, erc721Request);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test Transfer
        /// </summary>
        [Fact]
        public void TransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string name = null;
            //Erc721Request erc721Request = null;
            //var response = instance.Transfer(authorization, name, erc721Request);
            //Assert.IsType<AccountControllerResponse>(response);
        }

        /// <summary>
        /// Test TransferFrom
        /// </summary>
        [Fact]
        public void TransferFromTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string name = null;
            //Erc721Request erc721Request = null;
            //var response = instance.TransferFrom(authorization, name, erc721Request);
            //Assert.IsType<AccountControllerResponse>(response);
        }
    }
}
