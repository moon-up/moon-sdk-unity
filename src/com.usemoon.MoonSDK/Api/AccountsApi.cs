/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.usemoon.MoonSDK.Client;
using com.usemoon.MoonSDK.Model;

namespace com.usemoon.MoonSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="broadcastInput"></param>
        /// <returns>BroadCastRawTransactionAPIResponse</returns>
        BroadCastRawTransactionAPIResponse BroadcastTx(string authorization, string accountName, BroadcastInput broadcastInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="broadcastInput"></param>
        /// <returns>ApiResponse of BroadCastRawTransactionAPIResponse</returns>
        ApiResponse<BroadCastRawTransactionAPIResponse> BroadcastTxWithHttpInfo(string authorization, string accountName, BroadcastInput broadcastInput);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createAccountInput"></param>
        /// <returns>AccountAPIResponse</returns>
        AccountAPIResponse CreateAccount(string authorization, CreateAccountInput createAccountInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createAccountInput"></param>
        /// <returns>ApiResponse of AccountAPIResponse</returns>
        ApiResponse<AccountAPIResponse> CreateAccountWithHttpInfo(string authorization, CreateAccountInput createAccountInput);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <returns>AccountAPIResponse</returns>
        AccountAPIResponse DeleteAccount(string authorization, string accountName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <returns>ApiResponse of AccountAPIResponse</returns>
        ApiResponse<AccountAPIResponse> DeleteAccountWithHttpInfo(string authorization, string accountName);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="deployInput"></param>
        /// <returns>TransactionAPIResponse</returns>
        TransactionAPIResponse DeployContract(string authorization, string accountName, DeployInput deployInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="deployInput"></param>
        /// <returns>ApiResponse of TransactionAPIResponse</returns>
        ApiResponse<TransactionAPIResponse> DeployContractWithHttpInfo(string authorization, string accountName, DeployInput deployInput);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <returns>AccountAPIResponse</returns>
        AccountAPIResponse GetAccount(string authorization, string accountName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <returns>ApiResponse of AccountAPIResponse</returns>
        ApiResponse<AccountAPIResponse> GetAccountWithHttpInfo(string authorization, string accountName);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="chainId"></param>
        /// <returns>BalanceAPIResponse</returns>
        BalanceAPIResponse GetBalance(string accountName, string authorization, string chainId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="chainId"></param>
        /// <returns>ApiResponse of BalanceAPIResponse</returns>
        ApiResponse<BalanceAPIResponse> GetBalanceWithHttpInfo(string accountName, string authorization, string chainId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <returns>NonceAPIResponse</returns>
        NonceAPIResponse GetNonce(string accountName, string authorization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of NonceAPIResponse</returns>
        ApiResponse<NonceAPIResponse> GetNonceWithHttpInfo(string accountName, string authorization);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>AccountAPIResponse</returns>
        AccountAPIResponse ListAccounts(string authorization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of AccountAPIResponse</returns>
        ApiResponse<AccountAPIResponse> ListAccountsWithHttpInfo(string authorization);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signMessage"></param>
        /// <returns>SignMessageAPIResponse</returns>
        SignMessageAPIResponse SignMessage(string accountName, string authorization, SignMessage signMessage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signMessage"></param>
        /// <returns>ApiResponse of SignMessageAPIResponse</returns>
        ApiResponse<SignMessageAPIResponse> SignMessageWithHttpInfo(string accountName, string authorization, SignMessage signMessage);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <returns>TransactionAPIResponse</returns>
        TransactionAPIResponse SignTransaction(string accountName, string authorization, InputBody inputBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <returns>ApiResponse of TransactionAPIResponse</returns>
        ApiResponse<TransactionAPIResponse> SignTransactionWithHttpInfo(string accountName, string authorization, InputBody inputBody);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signTypedData"></param>
        /// <returns>SignMessageAPIResponse</returns>
        SignMessageAPIResponse SignTypedData(string accountName, string authorization, SignTypedData signTypedData);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signTypedData"></param>
        /// <returns>ApiResponse of SignMessageAPIResponse</returns>
        ApiResponse<SignMessageAPIResponse> SignTypedDataWithHttpInfo(string accountName, string authorization, SignTypedData signTypedData);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <returns>TransactionAPIResponse</returns>
        TransactionAPIResponse TransferEth(string accountName, string authorization, InputBody inputBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <returns>ApiResponse of TransactionAPIResponse</returns>
        ApiResponse<TransactionAPIResponse> TransferEthWithHttpInfo(string accountName, string authorization, InputBody inputBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="broadcastInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BroadCastRawTransactionAPIResponse</returns>
        System.Threading.Tasks.Task<BroadCastRawTransactionAPIResponse> BroadcastTxAsync(string authorization, string accountName, BroadcastInput broadcastInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="broadcastInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BroadCastRawTransactionAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BroadCastRawTransactionAPIResponse>> BroadcastTxWithHttpInfoAsync(string authorization, string accountName, BroadcastInput broadcastInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createAccountInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountAPIResponse</returns>
        System.Threading.Tasks.Task<AccountAPIResponse> CreateAccountAsync(string authorization, CreateAccountInput createAccountInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createAccountInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAPIResponse>> CreateAccountWithHttpInfoAsync(string authorization, CreateAccountInput createAccountInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountAPIResponse</returns>
        System.Threading.Tasks.Task<AccountAPIResponse> DeleteAccountAsync(string authorization, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAPIResponse>> DeleteAccountWithHttpInfoAsync(string authorization, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="deployInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionAPIResponse</returns>
        System.Threading.Tasks.Task<TransactionAPIResponse> DeployContractAsync(string authorization, string accountName, DeployInput deployInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="deployInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionAPIResponse>> DeployContractWithHttpInfoAsync(string authorization, string accountName, DeployInput deployInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountAPIResponse</returns>
        System.Threading.Tasks.Task<AccountAPIResponse> GetAccountAsync(string authorization, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAPIResponse>> GetAccountWithHttpInfoAsync(string authorization, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BalanceAPIResponse</returns>
        System.Threading.Tasks.Task<BalanceAPIResponse> GetBalanceAsync(string accountName, string authorization, string chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BalanceAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalanceAPIResponse>> GetBalanceWithHttpInfoAsync(string accountName, string authorization, string chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NonceAPIResponse</returns>
        System.Threading.Tasks.Task<NonceAPIResponse> GetNonceAsync(string accountName, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NonceAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NonceAPIResponse>> GetNonceWithHttpInfoAsync(string accountName, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountAPIResponse</returns>
        System.Threading.Tasks.Task<AccountAPIResponse> ListAccountsAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAPIResponse>> ListAccountsWithHttpInfoAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signMessage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignMessageAPIResponse</returns>
        System.Threading.Tasks.Task<SignMessageAPIResponse> SignMessageAsync(string accountName, string authorization, SignMessage signMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signMessage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignMessageAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignMessageAPIResponse>> SignMessageWithHttpInfoAsync(string accountName, string authorization, SignMessage signMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionAPIResponse</returns>
        System.Threading.Tasks.Task<TransactionAPIResponse> SignTransactionAsync(string accountName, string authorization, InputBody inputBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionAPIResponse>> SignTransactionWithHttpInfoAsync(string accountName, string authorization, InputBody inputBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signTypedData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignMessageAPIResponse</returns>
        System.Threading.Tasks.Task<SignMessageAPIResponse> SignTypedDataAsync(string accountName, string authorization, SignTypedData signTypedData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signTypedData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignMessageAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignMessageAPIResponse>> SignTypedDataWithHttpInfoAsync(string accountName, string authorization, SignTypedData signTypedData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionAPIResponse</returns>
        System.Threading.Tasks.Task<TransactionAPIResponse> TransferEthAsync(string accountName, string authorization, InputBody inputBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionAPIResponse>> TransferEthWithHttpInfoAsync(string accountName, string authorization, InputBody inputBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApi : IAccountsApiSync, IAccountsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountsApi : IDisposable, IAccountsApi
    {
        private com.usemoon.MoonSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AccountsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AccountsApi(string basePath)
        {
            this.Configuration = com.usemoon.MoonSDK.Client.Configuration.MergeConfigurations(
                com.usemoon.MoonSDK.Client.GlobalConfiguration.Instance,
                new com.usemoon.MoonSDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new com.usemoon.MoonSDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = com.usemoon.MoonSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AccountsApi(com.usemoon.MoonSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.usemoon.MoonSDK.Client.Configuration.MergeConfigurations(
                com.usemoon.MoonSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new com.usemoon.MoonSDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = com.usemoon.MoonSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AccountsApi(com.usemoon.MoonSDK.Client.ISynchronousClient client, com.usemoon.MoonSDK.Client.IAsynchronousClient asyncClient, com.usemoon.MoonSDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.usemoon.MoonSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public com.usemoon.MoonSDK.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.usemoon.MoonSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.usemoon.MoonSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.usemoon.MoonSDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.usemoon.MoonSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="broadcastInput"></param>
        /// <returns>BroadCastRawTransactionAPIResponse</returns>
        public BroadCastRawTransactionAPIResponse BroadcastTx(string authorization, string accountName, BroadcastInput broadcastInput)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<BroadCastRawTransactionAPIResponse> localVarResponse = BroadcastTxWithHttpInfo(authorization, accountName, broadcastInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="broadcastInput"></param>
        /// <returns>ApiResponse of BroadCastRawTransactionAPIResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<BroadCastRawTransactionAPIResponse> BroadcastTxWithHttpInfo(string authorization, string accountName, BroadcastInput broadcastInput)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->BroadcastTx");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->BroadcastTx");

            // verify the required parameter 'broadcastInput' is set
            if (broadcastInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'broadcastInput' when calling AccountsApi->BroadcastTx");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = broadcastInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BroadCastRawTransactionAPIResponse>("/accounts/{accountName}/broadcast-tx", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BroadcastTx", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="broadcastInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BroadCastRawTransactionAPIResponse</returns>
        public async System.Threading.Tasks.Task<BroadCastRawTransactionAPIResponse> BroadcastTxAsync(string authorization, string accountName, BroadcastInput broadcastInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = BroadcastTxWithHttpInfoAsync(authorization, accountName, broadcastInput, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<BroadCastRawTransactionAPIResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<BroadCastRawTransactionAPIResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="broadcastInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BroadCastRawTransactionAPIResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<BroadCastRawTransactionAPIResponse>> BroadcastTxWithHttpInfoAsync(string authorization, string accountName, BroadcastInput broadcastInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->BroadcastTx");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->BroadcastTx");

            // verify the required parameter 'broadcastInput' is set
            if (broadcastInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'broadcastInput' when calling AccountsApi->BroadcastTx");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = broadcastInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<BroadCastRawTransactionAPIResponse>("/accounts/{accountName}/broadcast-tx", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BroadcastTx", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createAccountInput"></param>
        /// <returns>AccountAPIResponse</returns>
        public AccountAPIResponse CreateAccount(string authorization, CreateAccountInput createAccountInput)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> localVarResponse = CreateAccountWithHttpInfo(authorization, createAccountInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createAccountInput"></param>
        /// <returns>ApiResponse of AccountAPIResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> CreateAccountWithHttpInfo(string authorization, CreateAccountInput createAccountInput)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->CreateAccount");

            // verify the required parameter 'createAccountInput' is set
            if (createAccountInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'createAccountInput' when calling AccountsApi->CreateAccount");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createAccountInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountAPIResponse>("/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createAccountInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountAPIResponse</returns>
        public async System.Threading.Tasks.Task<AccountAPIResponse> CreateAccountAsync(string authorization, CreateAccountInput createAccountInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateAccountWithHttpInfoAsync(authorization, createAccountInput, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createAccountInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountAPIResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse>> CreateAccountWithHttpInfoAsync(string authorization, CreateAccountInput createAccountInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->CreateAccount");

            // verify the required parameter 'createAccountInput' is set
            if (createAccountInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'createAccountInput' when calling AccountsApi->CreateAccount");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createAccountInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountAPIResponse>("/accounts", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <returns>AccountAPIResponse</returns>
        public AccountAPIResponse DeleteAccount(string authorization, string accountName)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> localVarResponse = DeleteAccountWithHttpInfo(authorization, accountName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <returns>ApiResponse of AccountAPIResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> DeleteAccountWithHttpInfo(string authorization, string accountName)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->DeleteAccount");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->DeleteAccount");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AccountAPIResponse>("/accounts/{accountName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountAPIResponse</returns>
        public async System.Threading.Tasks.Task<AccountAPIResponse> DeleteAccountAsync(string authorization, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = DeleteAccountWithHttpInfoAsync(authorization, accountName, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountAPIResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse>> DeleteAccountWithHttpInfoAsync(string authorization, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->DeleteAccount");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->DeleteAccount");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<AccountAPIResponse>("/accounts/{accountName}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="deployInput"></param>
        /// <returns>TransactionAPIResponse</returns>
        public TransactionAPIResponse DeployContract(string authorization, string accountName, DeployInput deployInput)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse> localVarResponse = DeployContractWithHttpInfo(authorization, accountName, deployInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="deployInput"></param>
        /// <returns>ApiResponse of TransactionAPIResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse> DeployContractWithHttpInfo(string authorization, string accountName, DeployInput deployInput)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->DeployContract");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->DeployContract");

            // verify the required parameter 'deployInput' is set
            if (deployInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'deployInput' when calling AccountsApi->DeployContract");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = deployInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionAPIResponse>("/accounts/{accountName}/deploy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeployContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="deployInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionAPIResponse</returns>
        public async System.Threading.Tasks.Task<TransactionAPIResponse> DeployContractAsync(string authorization, string accountName, DeployInput deployInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = DeployContractWithHttpInfoAsync(authorization, accountName, deployInput, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="deployInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionAPIResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse>> DeployContractWithHttpInfoAsync(string authorization, string accountName, DeployInput deployInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->DeployContract");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->DeployContract");

            // verify the required parameter 'deployInput' is set
            if (deployInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'deployInput' when calling AccountsApi->DeployContract");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = deployInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<TransactionAPIResponse>("/accounts/{accountName}/deploy", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeployContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <returns>AccountAPIResponse</returns>
        public AccountAPIResponse GetAccount(string authorization, string accountName)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> localVarResponse = GetAccountWithHttpInfo(authorization, accountName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <returns>ApiResponse of AccountAPIResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> GetAccountWithHttpInfo(string authorization, string accountName)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->GetAccount");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->GetAccount");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountAPIResponse>("/accounts/{accountName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountAPIResponse</returns>
        public async System.Threading.Tasks.Task<AccountAPIResponse> GetAccountAsync(string authorization, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAccountWithHttpInfoAsync(authorization, accountName, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountAPIResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse>> GetAccountWithHttpInfoAsync(string authorization, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->GetAccount");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->GetAccount");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AccountAPIResponse>("/accounts/{accountName}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="chainId"></param>
        /// <returns>BalanceAPIResponse</returns>
        public BalanceAPIResponse GetBalance(string accountName, string authorization, string chainId)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<BalanceAPIResponse> localVarResponse = GetBalanceWithHttpInfo(accountName, authorization, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="chainId"></param>
        /// <returns>ApiResponse of BalanceAPIResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<BalanceAPIResponse> GetBalanceWithHttpInfo(string accountName, string authorization, string chainId)
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->GetBalance");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->GetBalance");

            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'chainId' when calling AccountsApi->GetBalance");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(com.usemoon.MoonSDK.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BalanceAPIResponse>("/accounts/{accountName}/balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BalanceAPIResponse</returns>
        public async System.Threading.Tasks.Task<BalanceAPIResponse> GetBalanceAsync(string accountName, string authorization, string chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetBalanceWithHttpInfoAsync(accountName, authorization, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<BalanceAPIResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<BalanceAPIResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BalanceAPIResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<BalanceAPIResponse>> GetBalanceWithHttpInfoAsync(string accountName, string authorization, string chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->GetBalance");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->GetBalance");

            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'chainId' when calling AccountsApi->GetBalance");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(com.usemoon.MoonSDK.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<BalanceAPIResponse>("/accounts/{accountName}/balance", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <returns>NonceAPIResponse</returns>
        public NonceAPIResponse GetNonce(string accountName, string authorization)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<NonceAPIResponse> localVarResponse = GetNonceWithHttpInfo(accountName, authorization);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of NonceAPIResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<NonceAPIResponse> GetNonceWithHttpInfo(string accountName, string authorization)
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->GetNonce");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->GetNonce");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NonceAPIResponse>("/accounts/{accountName}/nonce", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNonce", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NonceAPIResponse</returns>
        public async System.Threading.Tasks.Task<NonceAPIResponse> GetNonceAsync(string accountName, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetNonceWithHttpInfoAsync(accountName, authorization, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<NonceAPIResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<NonceAPIResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NonceAPIResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<NonceAPIResponse>> GetNonceWithHttpInfoAsync(string accountName, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->GetNonce");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->GetNonce");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<NonceAPIResponse>("/accounts/{accountName}/nonce", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNonce", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>AccountAPIResponse</returns>
        public AccountAPIResponse ListAccounts(string authorization)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> localVarResponse = ListAccountsWithHttpInfo(authorization);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of AccountAPIResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> ListAccountsWithHttpInfo(string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->ListAccounts");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountAPIResponse>("/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountAPIResponse</returns>
        public async System.Threading.Tasks.Task<AccountAPIResponse> ListAccountsAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ListAccountsWithHttpInfoAsync(authorization, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountAPIResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountAPIResponse>> ListAccountsWithHttpInfoAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->ListAccounts");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AccountAPIResponse>("/accounts", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signMessage"></param>
        /// <returns>SignMessageAPIResponse</returns>
        public SignMessageAPIResponse SignMessage(string accountName, string authorization, SignMessage signMessage)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<SignMessageAPIResponse> localVarResponse = SignMessageWithHttpInfo(accountName, authorization, signMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signMessage"></param>
        /// <returns>ApiResponse of SignMessageAPIResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<SignMessageAPIResponse> SignMessageWithHttpInfo(string accountName, string authorization, SignMessage signMessage)
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->SignMessage");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->SignMessage");

            // verify the required parameter 'signMessage' is set
            if (signMessage == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'signMessage' when calling AccountsApi->SignMessage");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = signMessage;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SignMessageAPIResponse>("/accounts/{accountName}/sign-message", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signMessage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignMessageAPIResponse</returns>
        public async System.Threading.Tasks.Task<SignMessageAPIResponse> SignMessageAsync(string accountName, string authorization, SignMessage signMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SignMessageWithHttpInfoAsync(accountName, authorization, signMessage, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<SignMessageAPIResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<SignMessageAPIResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signMessage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignMessageAPIResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<SignMessageAPIResponse>> SignMessageWithHttpInfoAsync(string accountName, string authorization, SignMessage signMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->SignMessage");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->SignMessage");

            // verify the required parameter 'signMessage' is set
            if (signMessage == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'signMessage' when calling AccountsApi->SignMessage");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = signMessage;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<SignMessageAPIResponse>("/accounts/{accountName}/sign-message", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <returns>TransactionAPIResponse</returns>
        public TransactionAPIResponse SignTransaction(string accountName, string authorization, InputBody inputBody)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse> localVarResponse = SignTransactionWithHttpInfo(accountName, authorization, inputBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <returns>ApiResponse of TransactionAPIResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse> SignTransactionWithHttpInfo(string accountName, string authorization, InputBody inputBody)
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->SignTransaction");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->SignTransaction");

            // verify the required parameter 'inputBody' is set
            if (inputBody == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'inputBody' when calling AccountsApi->SignTransaction");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = inputBody;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionAPIResponse>("/accounts/{accountName}/sign-transaction", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionAPIResponse</returns>
        public async System.Threading.Tasks.Task<TransactionAPIResponse> SignTransactionAsync(string accountName, string authorization, InputBody inputBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SignTransactionWithHttpInfoAsync(accountName, authorization, inputBody, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionAPIResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse>> SignTransactionWithHttpInfoAsync(string accountName, string authorization, InputBody inputBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->SignTransaction");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->SignTransaction");

            // verify the required parameter 'inputBody' is set
            if (inputBody == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'inputBody' when calling AccountsApi->SignTransaction");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = inputBody;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<TransactionAPIResponse>("/accounts/{accountName}/sign-transaction", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signTypedData"></param>
        /// <returns>SignMessageAPIResponse</returns>
        public SignMessageAPIResponse SignTypedData(string accountName, string authorization, SignTypedData signTypedData)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<SignMessageAPIResponse> localVarResponse = SignTypedDataWithHttpInfo(accountName, authorization, signTypedData);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signTypedData"></param>
        /// <returns>ApiResponse of SignMessageAPIResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<SignMessageAPIResponse> SignTypedDataWithHttpInfo(string accountName, string authorization, SignTypedData signTypedData)
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->SignTypedData");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->SignTypedData");

            // verify the required parameter 'signTypedData' is set
            if (signTypedData == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'signTypedData' when calling AccountsApi->SignTypedData");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = signTypedData;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SignMessageAPIResponse>("/accounts/{accountName}/sign-typed-data", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignTypedData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signTypedData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignMessageAPIResponse</returns>
        public async System.Threading.Tasks.Task<SignMessageAPIResponse> SignTypedDataAsync(string accountName, string authorization, SignTypedData signTypedData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SignTypedDataWithHttpInfoAsync(accountName, authorization, signTypedData, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<SignMessageAPIResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<SignMessageAPIResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="signTypedData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignMessageAPIResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<SignMessageAPIResponse>> SignTypedDataWithHttpInfoAsync(string accountName, string authorization, SignTypedData signTypedData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->SignTypedData");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->SignTypedData");

            // verify the required parameter 'signTypedData' is set
            if (signTypedData == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'signTypedData' when calling AccountsApi->SignTypedData");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = signTypedData;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<SignMessageAPIResponse>("/accounts/{accountName}/sign-typed-data", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignTypedData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <returns>TransactionAPIResponse</returns>
        public TransactionAPIResponse TransferEth(string accountName, string authorization, InputBody inputBody)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse> localVarResponse = TransferEthWithHttpInfo(accountName, authorization, inputBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <returns>ApiResponse of TransactionAPIResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse> TransferEthWithHttpInfo(string accountName, string authorization, InputBody inputBody)
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->TransferEth");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->TransferEth");

            // verify the required parameter 'inputBody' is set
            if (inputBody == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'inputBody' when calling AccountsApi->TransferEth");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = inputBody;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionAPIResponse>("/accounts/{accountName}/transfer-eth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferEth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionAPIResponse</returns>
        public async System.Threading.Tasks.Task<TransactionAPIResponse> TransferEthAsync(string accountName, string authorization, InputBody inputBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = TransferEthWithHttpInfoAsync(accountName, authorization, inputBody, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="authorization"></param>
        /// <param name="inputBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionAPIResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<TransactionAPIResponse>> TransferEthWithHttpInfoAsync(string accountName, string authorization, InputBody inputBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling AccountsApi->TransferEth");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling AccountsApi->TransferEth");

            // verify the required parameter 'inputBody' is set
            if (inputBody == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'inputBody' when calling AccountsApi->TransferEth");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = inputBody;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<TransactionAPIResponse>("/accounts/{accountName}/transfer-eth", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferEth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
