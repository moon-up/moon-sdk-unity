/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = com.usemoon.MoonSDK.Client.OpenAPIDateConverter;

namespace com.usemoon.MoonSDK.Model
{
    /// <summary>
    /// SignMessage
    /// </summary>
    [DataContract(Name = "SignMessage")]
    public partial class SignMessage
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignMessage" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="data">data (required).</param>
        /// <param name="encoding">encoding.</param>
        /// <param name="header">header.</param>
        /// <param name="signtype">signtype.</param>
        public SignMessage(string name = default(string), string data = default(string), string encoding = default(string), bool header = default(bool), bool signtype = default(bool))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for SignMessage and cannot be null");
            }
            this.Data = data;
            this.Name = name;
            this.Encoding = encoding;
            this.Header = header;
            this.Signtype = signtype;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets Encoding
        /// </summary>
        [DataMember(Name = "encoding", EmitDefaultValue = false)]
        public string Encoding { get; set; }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name = "header", EmitDefaultValue = true)]
        public bool Header { get; set; }

        /// <summary>
        /// Gets or Sets Signtype
        /// </summary>
        [DataMember(Name = "signtype", EmitDefaultValue = true)]
        public bool Signtype { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignMessage {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Signtype: ").Append(Signtype).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
