/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = com.usemoon.MoonSDK.Client.OpenAPIDateConverter;

namespace com.usemoon.MoonSDK.Model
{
    /// <summary>
    /// GetSwapDto
    /// </summary>
    [DataContract(Name = "GetSwapDto")]
    public partial class GetSwapDto
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSwapDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetSwapDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSwapDto" /> class.
        /// </summary>
        /// <param name="src">src (required).</param>
        /// <param name="dst">dst (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="from">from (required).</param>
        /// <param name="slippage">slippage (required).</param>
        /// <param name="protocols">protocols.</param>
        /// <param name="fee">fee.</param>
        /// <param name="disableEstimate">disableEstimate.</param>
        /// <param name="permit">permit.</param>
        /// <param name="includeTokensInfo">includeTokensInfo.</param>
        /// <param name="includeProtocols">includeProtocols.</param>
        /// <param name="compatibility">compatibility.</param>
        /// <param name="allowPartialFill">allowPartialFill.</param>
        /// <param name="parts">parts.</param>
        /// <param name="mainRouteParts">mainRouteParts.</param>
        /// <param name="connectorTokens">connectorTokens.</param>
        /// <param name="complexityLevel">complexityLevel.</param>
        /// <param name="gasLimit">gasLimit.</param>
        /// <param name="gasPrice">gasPrice.</param>
        /// <param name="referrer">referrer.</param>
        /// <param name="receiver">receiver.</param>
        /// <param name="chainId">chainId.</param>
        public GetSwapDto(string src = default(string), string dst = default(string), string amount = default(string), string from = default(string), double slippage = default(double), string protocols = default(string), string fee = default(string), bool disableEstimate = default(bool), string permit = default(string), bool includeTokensInfo = default(bool), bool includeProtocols = default(bool), bool compatibility = default(bool), bool allowPartialFill = default(bool), string parts = default(string), string mainRouteParts = default(string), string connectorTokens = default(string), string complexityLevel = default(string), string gasLimit = default(string), string gasPrice = default(string), string referrer = default(string), string receiver = default(string), double chainId = default(double))
        {
            // to ensure "src" is required (not null)
            if (src == null)
            {
                throw new ArgumentNullException("src is a required property for GetSwapDto and cannot be null");
            }
            this.Src = src;
            // to ensure "dst" is required (not null)
            if (dst == null)
            {
                throw new ArgumentNullException("dst is a required property for GetSwapDto and cannot be null");
            }
            this.Dst = dst;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for GetSwapDto and cannot be null");
            }
            this.Amount = amount;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for GetSwapDto and cannot be null");
            }
            this.From = from;
            this.Slippage = slippage;
            this.Protocols = protocols;
            this.Fee = fee;
            this.DisableEstimate = disableEstimate;
            this.Permit = permit;
            this.IncludeTokensInfo = includeTokensInfo;
            this.IncludeProtocols = includeProtocols;
            this.Compatibility = compatibility;
            this.AllowPartialFill = allowPartialFill;
            this.Parts = parts;
            this.MainRouteParts = mainRouteParts;
            this.ConnectorTokens = connectorTokens;
            this.ComplexityLevel = complexityLevel;
            this.GasLimit = gasLimit;
            this.GasPrice = gasPrice;
            this.Referrer = referrer;
            this.Receiver = receiver;
            this.ChainId = chainId;
        }

        /// <summary>
        /// Gets or Sets Src
        /// </summary>
        [DataMember(Name = "src", IsRequired = true, EmitDefaultValue = true)]
        public string Src { get; set; }

        /// <summary>
        /// Gets or Sets Dst
        /// </summary>
        [DataMember(Name = "dst", IsRequired = true, EmitDefaultValue = true)]
        public string Dst { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets Slippage
        /// </summary>
        [DataMember(Name = "slippage", IsRequired = true, EmitDefaultValue = true)]
        public double Slippage { get; set; }

        /// <summary>
        /// Gets or Sets Protocols
        /// </summary>
        [DataMember(Name = "protocols", EmitDefaultValue = false)]
        public string Protocols { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name = "fee", EmitDefaultValue = false)]
        public string Fee { get; set; }

        /// <summary>
        /// Gets or Sets DisableEstimate
        /// </summary>
        [DataMember(Name = "disableEstimate", EmitDefaultValue = true)]
        public bool DisableEstimate { get; set; }

        /// <summary>
        /// Gets or Sets Permit
        /// </summary>
        [DataMember(Name = "permit", EmitDefaultValue = false)]
        public string Permit { get; set; }

        /// <summary>
        /// Gets or Sets IncludeTokensInfo
        /// </summary>
        [DataMember(Name = "includeTokensInfo", EmitDefaultValue = true)]
        public bool IncludeTokensInfo { get; set; }

        /// <summary>
        /// Gets or Sets IncludeProtocols
        /// </summary>
        [DataMember(Name = "includeProtocols", EmitDefaultValue = true)]
        public bool IncludeProtocols { get; set; }

        /// <summary>
        /// Gets or Sets Compatibility
        /// </summary>
        [DataMember(Name = "compatibility", EmitDefaultValue = true)]
        public bool Compatibility { get; set; }

        /// <summary>
        /// Gets or Sets AllowPartialFill
        /// </summary>
        [DataMember(Name = "allowPartialFill", EmitDefaultValue = true)]
        public bool AllowPartialFill { get; set; }

        /// <summary>
        /// Gets or Sets Parts
        /// </summary>
        [DataMember(Name = "parts", EmitDefaultValue = false)]
        public string Parts { get; set; }

        /// <summary>
        /// Gets or Sets MainRouteParts
        /// </summary>
        [DataMember(Name = "mainRouteParts", EmitDefaultValue = false)]
        public string MainRouteParts { get; set; }

        /// <summary>
        /// Gets or Sets ConnectorTokens
        /// </summary>
        [DataMember(Name = "connectorTokens", EmitDefaultValue = false)]
        public string ConnectorTokens { get; set; }

        /// <summary>
        /// Gets or Sets ComplexityLevel
        /// </summary>
        [DataMember(Name = "complexityLevel", EmitDefaultValue = false)]
        public string ComplexityLevel { get; set; }

        /// <summary>
        /// Gets or Sets GasLimit
        /// </summary>
        [DataMember(Name = "gasLimit", EmitDefaultValue = false)]
        public string GasLimit { get; set; }

        /// <summary>
        /// Gets or Sets GasPrice
        /// </summary>
        [DataMember(Name = "gasPrice", EmitDefaultValue = false)]
        public string GasPrice { get; set; }

        /// <summary>
        /// Gets or Sets Referrer
        /// </summary>
        [DataMember(Name = "referrer", EmitDefaultValue = false)]
        public string Referrer { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", EmitDefaultValue = false)]
        public string Receiver { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [DataMember(Name = "chainId", EmitDefaultValue = false)]
        public double ChainId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSwapDto {\n");
            sb.Append("  Src: ").Append(Src).Append("\n");
            sb.Append("  Dst: ").Append(Dst).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Slippage: ").Append(Slippage).Append("\n");
            sb.Append("  Protocols: ").Append(Protocols).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  DisableEstimate: ").Append(DisableEstimate).Append("\n");
            sb.Append("  Permit: ").Append(Permit).Append("\n");
            sb.Append("  IncludeTokensInfo: ").Append(IncludeTokensInfo).Append("\n");
            sb.Append("  IncludeProtocols: ").Append(IncludeProtocols).Append("\n");
            sb.Append("  Compatibility: ").Append(Compatibility).Append("\n");
            sb.Append("  AllowPartialFill: ").Append(AllowPartialFill).Append("\n");
            sb.Append("  Parts: ").Append(Parts).Append("\n");
            sb.Append("  MainRouteParts: ").Append(MainRouteParts).Append("\n");
            sb.Append("  ConnectorTokens: ").Append(ConnectorTokens).Append("\n");
            sb.Append("  ComplexityLevel: ").Append(ComplexityLevel).Append("\n");
            sb.Append("  GasLimit: ").Append(GasLimit).Append("\n");
            sb.Append("  GasPrice: ").Append(GasPrice).Append("\n");
            sb.Append("  Referrer: ").Append(Referrer).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
