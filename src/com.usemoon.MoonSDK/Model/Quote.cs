/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = com.usemoon.MoonSDK.Client.OpenAPIDateConverter;

namespace com.usemoon.MoonSDK.Model
{
    /// <summary>
    /// Quote
    /// </summary>
    [DataContract(Name = "Quote")]
    public partial class Quote
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Quote" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Quote() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Quote" /> class.
        /// </summary>
        /// <param name="recommendations">recommendations (required).</param>
        /// <param name="paymentMethod">paymentMethod (required).</param>
        /// <param name="quoteId">quoteId (required).</param>
        /// <param name="ramp">ramp (required).</param>
        /// <param name="availablePaymentMethods">availablePaymentMethods (required).</param>
        /// <param name="payout">payout (required).</param>
        /// <param name="transactionFee">transactionFee (required).</param>
        /// <param name="networkFee">networkFee (required).</param>
        /// <param name="rate">rate (required).</param>
        public Quote(List<string> recommendations = default(List<string>), string paymentMethod = default(string), string quoteId = default(string), string ramp = default(string), List<AvailablePaymentMethod> availablePaymentMethods = default(List<AvailablePaymentMethod>), double payout = default(double), double transactionFee = default(double), double networkFee = default(double), double rate = default(double))
        {
            // to ensure "recommendations" is required (not null)
            if (recommendations == null)
            {
                throw new ArgumentNullException("recommendations is a required property for Quote and cannot be null");
            }
            this.Recommendations = recommendations;
            // to ensure "paymentMethod" is required (not null)
            if (paymentMethod == null)
            {
                throw new ArgumentNullException("paymentMethod is a required property for Quote and cannot be null");
            }
            this.PaymentMethod = paymentMethod;
            // to ensure "quoteId" is required (not null)
            if (quoteId == null)
            {
                throw new ArgumentNullException("quoteId is a required property for Quote and cannot be null");
            }
            this.QuoteId = quoteId;
            // to ensure "ramp" is required (not null)
            if (ramp == null)
            {
                throw new ArgumentNullException("ramp is a required property for Quote and cannot be null");
            }
            this.Ramp = ramp;
            // to ensure "availablePaymentMethods" is required (not null)
            if (availablePaymentMethods == null)
            {
                throw new ArgumentNullException("availablePaymentMethods is a required property for Quote and cannot be null");
            }
            this.AvailablePaymentMethods = availablePaymentMethods;
            this.Payout = payout;
            this.TransactionFee = transactionFee;
            this.NetworkFee = networkFee;
            this.Rate = rate;
        }

        /// <summary>
        /// Gets or Sets Recommendations
        /// </summary>
        [DataMember(Name = "recommendations", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Recommendations { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "paymentMethod", IsRequired = true, EmitDefaultValue = true)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets QuoteId
        /// </summary>
        [DataMember(Name = "quoteId", IsRequired = true, EmitDefaultValue = true)]
        public string QuoteId { get; set; }

        /// <summary>
        /// Gets or Sets Ramp
        /// </summary>
        [DataMember(Name = "ramp", IsRequired = true, EmitDefaultValue = true)]
        public string Ramp { get; set; }

        /// <summary>
        /// Gets or Sets AvailablePaymentMethods
        /// </summary>
        [DataMember(Name = "availablePaymentMethods", IsRequired = true, EmitDefaultValue = true)]
        public List<AvailablePaymentMethod> AvailablePaymentMethods { get; set; }

        /// <summary>
        /// Gets or Sets Payout
        /// </summary>
        [DataMember(Name = "payout", IsRequired = true, EmitDefaultValue = true)]
        public double Payout { get; set; }

        /// <summary>
        /// Gets or Sets TransactionFee
        /// </summary>
        [DataMember(Name = "transactionFee", IsRequired = true, EmitDefaultValue = true)]
        public double TransactionFee { get; set; }

        /// <summary>
        /// Gets or Sets NetworkFee
        /// </summary>
        [DataMember(Name = "networkFee", IsRequired = true, EmitDefaultValue = true)]
        public double NetworkFee { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name = "rate", IsRequired = true, EmitDefaultValue = true)]
        public double Rate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Quote {\n");
            sb.Append("  Recommendations: ").Append(Recommendations).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  QuoteId: ").Append(QuoteId).Append("\n");
            sb.Append("  Ramp: ").Append(Ramp).Append("\n");
            sb.Append("  AvailablePaymentMethods: ").Append(AvailablePaymentMethods).Append("\n");
            sb.Append("  Payout: ").Append(Payout).Append("\n");
            sb.Append("  TransactionFee: ").Append(TransactionFee).Append("\n");
            sb.Append("  NetworkFee: ").Append(NetworkFee).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
