/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnramperApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="transactionInput"></param>
        /// <returns>Object</returns>
        Object OnRamperCheckout(string authorization, string accountName, TransactionInput transactionInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="transactionInput"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OnRamperCheckoutWithHttpInfo(string authorization, string accountName, TransactionInput transactionInput);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;Quote&gt;</returns>
        List<Quote> OnRamperGetQuotesBuy(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;Quote&gt;</returns>
        ApiResponse<List<Quote>> OnRamperGetQuotesBuyWithHttpInfo(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;SellQuote&gt;</returns>
        List<SellQuote> OnRamperGetQuotesSell(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;SellQuote&gt;</returns>
        ApiResponse<List<SellQuote>> OnRamperGetQuotesSellWithHttpInfo(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="source"></param>
        /// <param name="country"></param>
        /// <returns>SupportedAssetResponse</returns>
        SupportedAssetResponse OnRamperGetSupportedAssets(string authorization, string source, string country);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="source"></param>
        /// <param name="country"></param>
        /// <returns>ApiResponse of SupportedAssetResponse</returns>
        ApiResponse<SupportedAssetResponse> OnRamperGetSupportedAssetsWithHttpInfo(string authorization, string source, string country);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="type"></param>
        /// <returns>SupportedCurrenciesResponse</returns>
        SupportedCurrenciesResponse OnRamperGetSupportedCurrencies(string authorization, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of SupportedCurrenciesResponse</returns>
        ApiResponse<SupportedCurrenciesResponse> OnRamperGetSupportedCurrenciesWithHttpInfo(string authorization, string type);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <returns>SupportedDefaultResponse</returns>
        SupportedDefaultResponse OnRamperGetSupportedDefaultsAll(string authorization, string country, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of SupportedDefaultResponse</returns>
        ApiResponse<SupportedDefaultResponse> OnRamperGetSupportedDefaultsAllWithHttpInfo(string authorization, string country, string type);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>GetSupportedOnRampsResponse</returns>
        GetSupportedOnRampsResponse OnRamperGetSupportedOnRampsAll(string authorization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of GetSupportedOnRampsResponse</returns>
        ApiResponse<GetSupportedOnRampsResponse> OnRamperGetSupportedOnRampsAllWithHttpInfo(string authorization);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <returns>SupportedPaymentTypesCurrencyResponse</returns>
        SupportedPaymentTypesCurrencyResponse OnRamperGetSupportedPaymentTypes(string authorization, string fiat, string country, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of SupportedPaymentTypesCurrencyResponse</returns>
        ApiResponse<SupportedPaymentTypesCurrencyResponse> OnRamperGetSupportedPaymentTypesWithHttpInfo(string authorization, string fiat, string country, string type);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <returns>SupportedPaymentTypesCurrencyResponse</returns>
        SupportedPaymentTypesCurrencyResponse OnRamperGetSupportedPaymentTypesFiat(string authorization, string fiat, string country);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <returns>ApiResponse of SupportedPaymentTypesCurrencyResponse</returns>
        ApiResponse<SupportedPaymentTypesCurrencyResponse> OnRamperGetSupportedPaymentTypesFiatWithHttpInfo(string authorization, string fiat, string country);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnramperApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="transactionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OnRamperCheckoutAsync(string authorization, string accountName, TransactionInput transactionInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="transactionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OnRamperCheckoutWithHttpInfoAsync(string authorization, string accountName, TransactionInput transactionInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Quote&gt;</returns>
        System.Threading.Tasks.Task<List<Quote>> OnRamperGetQuotesBuyAsync(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Quote&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Quote>>> OnRamperGetQuotesBuyWithHttpInfoAsync(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SellQuote&gt;</returns>
        System.Threading.Tasks.Task<List<SellQuote>> OnRamperGetQuotesSellAsync(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SellQuote&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SellQuote>>> OnRamperGetQuotesSellWithHttpInfoAsync(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="source"></param>
        /// <param name="country"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportedAssetResponse</returns>
        System.Threading.Tasks.Task<SupportedAssetResponse> OnRamperGetSupportedAssetsAsync(string authorization, string source, string country, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="source"></param>
        /// <param name="country"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportedAssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupportedAssetResponse>> OnRamperGetSupportedAssetsWithHttpInfoAsync(string authorization, string source, string country, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportedCurrenciesResponse</returns>
        System.Threading.Tasks.Task<SupportedCurrenciesResponse> OnRamperGetSupportedCurrenciesAsync(string authorization, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportedCurrenciesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupportedCurrenciesResponse>> OnRamperGetSupportedCurrenciesWithHttpInfoAsync(string authorization, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportedDefaultResponse</returns>
        System.Threading.Tasks.Task<SupportedDefaultResponse> OnRamperGetSupportedDefaultsAllAsync(string authorization, string country, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportedDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupportedDefaultResponse>> OnRamperGetSupportedDefaultsAllWithHttpInfoAsync(string authorization, string country, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupportedOnRampsResponse</returns>
        System.Threading.Tasks.Task<GetSupportedOnRampsResponse> OnRamperGetSupportedOnRampsAllAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupportedOnRampsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupportedOnRampsResponse>> OnRamperGetSupportedOnRampsAllWithHttpInfoAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportedPaymentTypesCurrencyResponse</returns>
        System.Threading.Tasks.Task<SupportedPaymentTypesCurrencyResponse> OnRamperGetSupportedPaymentTypesAsync(string authorization, string fiat, string country, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportedPaymentTypesCurrencyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupportedPaymentTypesCurrencyResponse>> OnRamperGetSupportedPaymentTypesWithHttpInfoAsync(string authorization, string fiat, string country, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportedPaymentTypesCurrencyResponse</returns>
        System.Threading.Tasks.Task<SupportedPaymentTypesCurrencyResponse> OnRamperGetSupportedPaymentTypesFiatAsync(string authorization, string fiat, string country, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportedPaymentTypesCurrencyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupportedPaymentTypesCurrencyResponse>> OnRamperGetSupportedPaymentTypesFiatWithHttpInfoAsync(string authorization, string fiat, string country, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnramperApi : IOnramperApiSync, IOnramperApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OnramperApi : IDisposable, IOnramperApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OnramperApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public OnramperApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnramperApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public OnramperApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnramperApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public OnramperApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnramperApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public OnramperApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Org.OpenAPITools.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="transactionInput"></param>
        /// <returns>Object</returns>
        public Object OnRamperCheckout(string authorization, string accountName, TransactionInput transactionInput)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = OnRamperCheckoutWithHttpInfo(authorization, accountName, transactionInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="transactionInput"></param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> OnRamperCheckoutWithHttpInfo(string authorization, string accountName, TransactionInput transactionInput)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperCheckout");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountName' when calling OnramperApi->OnRamperCheckout");

            // verify the required parameter 'transactionInput' is set
            if (transactionInput == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionInput' when calling OnramperApi->OnRamperCheckout");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = transactionInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/onramper/fund/${accountName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperCheckout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="transactionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OnRamperCheckoutAsync(string authorization, string accountName, TransactionInput transactionInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = OnRamperCheckoutWithHttpInfoAsync(authorization, accountName, transactionInput, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="transactionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> OnRamperCheckoutWithHttpInfoAsync(string authorization, string accountName, TransactionInput transactionInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperCheckout");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountName' when calling OnramperApi->OnRamperCheckout");

            // verify the required parameter 'transactionInput' is set
            if (transactionInput == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionInput' when calling OnramperApi->OnRamperCheckout");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = transactionInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/onramper/fund/${accountName}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperCheckout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;Quote&gt;</returns>
        public List<Quote> OnRamperGetQuotesBuy(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Quote>> localVarResponse = OnRamperGetQuotesBuyWithHttpInfo(authorization, fiat, crypto, amount, paymentMethod, uuid, clientName, country);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;Quote&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Quote>> OnRamperGetQuotesBuyWithHttpInfo(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetQuotesBuy");

            // verify the required parameter 'fiat' is set
            if (fiat == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fiat' when calling OnramperApi->OnRamperGetQuotesBuy");

            // verify the required parameter 'crypto' is set
            if (crypto == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'crypto' when calling OnramperApi->OnRamperGetQuotesBuy");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fiat", fiat));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "crypto", crypto));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amount", amount));
            if (paymentMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paymentMethod", paymentMethod));
            }
            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid));
            }
            if (clientName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clientName", clientName));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Quote>>("/onramper/quotes/buy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetQuotesBuy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Quote&gt;</returns>
        public async System.Threading.Tasks.Task<List<Quote>> OnRamperGetQuotesBuyAsync(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = OnRamperGetQuotesBuyWithHttpInfoAsync(authorization, fiat, crypto, amount, paymentMethod, uuid, clientName, country, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<List<Quote>> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<List<Quote>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Quote&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Quote>>> OnRamperGetQuotesBuyWithHttpInfoAsync(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetQuotesBuy");

            // verify the required parameter 'fiat' is set
            if (fiat == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fiat' when calling OnramperApi->OnRamperGetQuotesBuy");

            // verify the required parameter 'crypto' is set
            if (crypto == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'crypto' when calling OnramperApi->OnRamperGetQuotesBuy");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fiat", fiat));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "crypto", crypto));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amount", amount));
            if (paymentMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paymentMethod", paymentMethod));
            }
            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid));
            }
            if (clientName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clientName", clientName));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<Quote>>("/onramper/quotes/buy", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetQuotesBuy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;SellQuote&gt;</returns>
        public List<SellQuote> OnRamperGetQuotesSell(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<List<SellQuote>> localVarResponse = OnRamperGetQuotesSellWithHttpInfo(authorization, fiat, crypto, amount, paymentMethod, uuid, clientName, country);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;SellQuote&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<SellQuote>> OnRamperGetQuotesSellWithHttpInfo(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetQuotesSell");

            // verify the required parameter 'fiat' is set
            if (fiat == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fiat' when calling OnramperApi->OnRamperGetQuotesSell");

            // verify the required parameter 'crypto' is set
            if (crypto == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'crypto' when calling OnramperApi->OnRamperGetQuotesSell");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fiat", fiat));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "crypto", crypto));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amount", amount));
            if (paymentMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paymentMethod", paymentMethod));
            }
            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid));
            }
            if (clientName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clientName", clientName));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SellQuote>>("/onramper/quotes/sell", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetQuotesSell", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SellQuote&gt;</returns>
        public async System.Threading.Tasks.Task<List<SellQuote>> OnRamperGetQuotesSellAsync(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = OnRamperGetQuotesSellWithHttpInfoAsync(authorization, fiat, crypto, amount, paymentMethod, uuid, clientName, country, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<List<SellQuote>> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<List<SellQuote>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="crypto"></param>
        /// <param name="amount"></param>
        /// <param name="paymentMethod"> (optional, default to &quot;creditcard&quot;)</param>
        /// <param name="uuid"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientName"> (optional, default to &quot;&quot;)</param>
        /// <param name="country"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SellQuote&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<SellQuote>>> OnRamperGetQuotesSellWithHttpInfoAsync(string authorization, string fiat, string crypto, double amount, string paymentMethod = default(string), string uuid = default(string), string clientName = default(string), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetQuotesSell");

            // verify the required parameter 'fiat' is set
            if (fiat == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fiat' when calling OnramperApi->OnRamperGetQuotesSell");

            // verify the required parameter 'crypto' is set
            if (crypto == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'crypto' when calling OnramperApi->OnRamperGetQuotesSell");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fiat", fiat));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "crypto", crypto));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amount", amount));
            if (paymentMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paymentMethod", paymentMethod));
            }
            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid));
            }
            if (clientName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clientName", clientName));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<SellQuote>>("/onramper/quotes/sell", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetQuotesSell", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="source"></param>
        /// <param name="country"></param>
        /// <returns>SupportedAssetResponse</returns>
        public SupportedAssetResponse OnRamperGetSupportedAssets(string authorization, string source, string country)
        {
            Org.OpenAPITools.Client.ApiResponse<SupportedAssetResponse> localVarResponse = OnRamperGetSupportedAssetsWithHttpInfo(authorization, source, country);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="source"></param>
        /// <param name="country"></param>
        /// <returns>ApiResponse of SupportedAssetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SupportedAssetResponse> OnRamperGetSupportedAssetsWithHttpInfo(string authorization, string source, string country)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetSupportedAssets");

            // verify the required parameter 'source' is set
            if (source == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'source' when calling OnramperApi->OnRamperGetSupportedAssets");

            // verify the required parameter 'country' is set
            if (country == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'country' when calling OnramperApi->OnRamperGetSupportedAssets");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SupportedAssetResponse>("/onramper/assets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetSupportedAssets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="source"></param>
        /// <param name="country"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportedAssetResponse</returns>
        public async System.Threading.Tasks.Task<SupportedAssetResponse> OnRamperGetSupportedAssetsAsync(string authorization, string source, string country, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = OnRamperGetSupportedAssetsWithHttpInfoAsync(authorization, source, country, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<SupportedAssetResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<SupportedAssetResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="source"></param>
        /// <param name="country"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportedAssetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SupportedAssetResponse>> OnRamperGetSupportedAssetsWithHttpInfoAsync(string authorization, string source, string country, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetSupportedAssets");

            // verify the required parameter 'source' is set
            if (source == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'source' when calling OnramperApi->OnRamperGetSupportedAssets");

            // verify the required parameter 'country' is set
            if (country == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'country' when calling OnramperApi->OnRamperGetSupportedAssets");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<SupportedAssetResponse>("/onramper/assets", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetSupportedAssets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="type"></param>
        /// <returns>SupportedCurrenciesResponse</returns>
        public SupportedCurrenciesResponse OnRamperGetSupportedCurrencies(string authorization, string type)
        {
            Org.OpenAPITools.Client.ApiResponse<SupportedCurrenciesResponse> localVarResponse = OnRamperGetSupportedCurrenciesWithHttpInfo(authorization, type);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of SupportedCurrenciesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SupportedCurrenciesResponse> OnRamperGetSupportedCurrenciesWithHttpInfo(string authorization, string type)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetSupportedCurrencies");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling OnramperApi->OnRamperGetSupportedCurrencies");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SupportedCurrenciesResponse>("/onramper/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetSupportedCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportedCurrenciesResponse</returns>
        public async System.Threading.Tasks.Task<SupportedCurrenciesResponse> OnRamperGetSupportedCurrenciesAsync(string authorization, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = OnRamperGetSupportedCurrenciesWithHttpInfoAsync(authorization, type, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<SupportedCurrenciesResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<SupportedCurrenciesResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportedCurrenciesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SupportedCurrenciesResponse>> OnRamperGetSupportedCurrenciesWithHttpInfoAsync(string authorization, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetSupportedCurrencies");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling OnramperApi->OnRamperGetSupportedCurrencies");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<SupportedCurrenciesResponse>("/onramper/currencies", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetSupportedCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <returns>SupportedDefaultResponse</returns>
        public SupportedDefaultResponse OnRamperGetSupportedDefaultsAll(string authorization, string country, string type)
        {
            Org.OpenAPITools.Client.ApiResponse<SupportedDefaultResponse> localVarResponse = OnRamperGetSupportedDefaultsAllWithHttpInfo(authorization, country, type);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of SupportedDefaultResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SupportedDefaultResponse> OnRamperGetSupportedDefaultsAllWithHttpInfo(string authorization, string country, string type)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetSupportedDefaultsAll");

            // verify the required parameter 'country' is set
            if (country == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'country' when calling OnramperApi->OnRamperGetSupportedDefaultsAll");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling OnramperApi->OnRamperGetSupportedDefaultsAll");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SupportedDefaultResponse>("/onramper/defaults", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetSupportedDefaultsAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportedDefaultResponse</returns>
        public async System.Threading.Tasks.Task<SupportedDefaultResponse> OnRamperGetSupportedDefaultsAllAsync(string authorization, string country, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = OnRamperGetSupportedDefaultsAllWithHttpInfoAsync(authorization, country, type, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<SupportedDefaultResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<SupportedDefaultResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportedDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SupportedDefaultResponse>> OnRamperGetSupportedDefaultsAllWithHttpInfoAsync(string authorization, string country, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetSupportedDefaultsAll");

            // verify the required parameter 'country' is set
            if (country == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'country' when calling OnramperApi->OnRamperGetSupportedDefaultsAll");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling OnramperApi->OnRamperGetSupportedDefaultsAll");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<SupportedDefaultResponse>("/onramper/defaults", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetSupportedDefaultsAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>GetSupportedOnRampsResponse</returns>
        public GetSupportedOnRampsResponse OnRamperGetSupportedOnRampsAll(string authorization)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupportedOnRampsResponse> localVarResponse = OnRamperGetSupportedOnRampsAllWithHttpInfo(authorization);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of GetSupportedOnRampsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSupportedOnRampsResponse> OnRamperGetSupportedOnRampsAllWithHttpInfo(string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetSupportedOnRampsAll");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSupportedOnRampsResponse>("/onramper/onramps", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetSupportedOnRampsAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupportedOnRampsResponse</returns>
        public async System.Threading.Tasks.Task<GetSupportedOnRampsResponse> OnRamperGetSupportedOnRampsAllAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = OnRamperGetSupportedOnRampsAllWithHttpInfoAsync(authorization, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<GetSupportedOnRampsResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<GetSupportedOnRampsResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupportedOnRampsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSupportedOnRampsResponse>> OnRamperGetSupportedOnRampsAllWithHttpInfoAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetSupportedOnRampsAll");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetSupportedOnRampsResponse>("/onramper/onramps", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetSupportedOnRampsAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <returns>SupportedPaymentTypesCurrencyResponse</returns>
        public SupportedPaymentTypesCurrencyResponse OnRamperGetSupportedPaymentTypes(string authorization, string fiat, string country, string type)
        {
            Org.OpenAPITools.Client.ApiResponse<SupportedPaymentTypesCurrencyResponse> localVarResponse = OnRamperGetSupportedPaymentTypesWithHttpInfo(authorization, fiat, country, type);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of SupportedPaymentTypesCurrencyResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SupportedPaymentTypesCurrencyResponse> OnRamperGetSupportedPaymentTypesWithHttpInfo(string authorization, string fiat, string country, string type)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetSupportedPaymentTypes");

            // verify the required parameter 'fiat' is set
            if (fiat == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fiat' when calling OnramperApi->OnRamperGetSupportedPaymentTypes");

            // verify the required parameter 'country' is set
            if (country == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'country' when calling OnramperApi->OnRamperGetSupportedPaymentTypes");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling OnramperApi->OnRamperGetSupportedPaymentTypes");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fiat", fiat));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SupportedPaymentTypesCurrencyResponse>("/onramper/payment-types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetSupportedPaymentTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportedPaymentTypesCurrencyResponse</returns>
        public async System.Threading.Tasks.Task<SupportedPaymentTypesCurrencyResponse> OnRamperGetSupportedPaymentTypesAsync(string authorization, string fiat, string country, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = OnRamperGetSupportedPaymentTypesWithHttpInfoAsync(authorization, fiat, country, type, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<SupportedPaymentTypesCurrencyResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<SupportedPaymentTypesCurrencyResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportedPaymentTypesCurrencyResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SupportedPaymentTypesCurrencyResponse>> OnRamperGetSupportedPaymentTypesWithHttpInfoAsync(string authorization, string fiat, string country, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetSupportedPaymentTypes");

            // verify the required parameter 'fiat' is set
            if (fiat == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fiat' when calling OnramperApi->OnRamperGetSupportedPaymentTypes");

            // verify the required parameter 'country' is set
            if (country == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'country' when calling OnramperApi->OnRamperGetSupportedPaymentTypes");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling OnramperApi->OnRamperGetSupportedPaymentTypes");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fiat", fiat));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<SupportedPaymentTypesCurrencyResponse>("/onramper/payment-types", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetSupportedPaymentTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <returns>SupportedPaymentTypesCurrencyResponse</returns>
        public SupportedPaymentTypesCurrencyResponse OnRamperGetSupportedPaymentTypesFiat(string authorization, string fiat, string country)
        {
            Org.OpenAPITools.Client.ApiResponse<SupportedPaymentTypesCurrencyResponse> localVarResponse = OnRamperGetSupportedPaymentTypesFiatWithHttpInfo(authorization, fiat, country);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <returns>ApiResponse of SupportedPaymentTypesCurrencyResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SupportedPaymentTypesCurrencyResponse> OnRamperGetSupportedPaymentTypesFiatWithHttpInfo(string authorization, string fiat, string country)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetSupportedPaymentTypesFiat");

            // verify the required parameter 'fiat' is set
            if (fiat == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fiat' when calling OnramperApi->OnRamperGetSupportedPaymentTypesFiat");

            // verify the required parameter 'country' is set
            if (country == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'country' when calling OnramperApi->OnRamperGetSupportedPaymentTypesFiat");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fiat", fiat));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SupportedPaymentTypesCurrencyResponse>("/onramper/payment-types/fiat", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetSupportedPaymentTypesFiat", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportedPaymentTypesCurrencyResponse</returns>
        public async System.Threading.Tasks.Task<SupportedPaymentTypesCurrencyResponse> OnRamperGetSupportedPaymentTypesFiatAsync(string authorization, string fiat, string country, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = OnRamperGetSupportedPaymentTypesFiatWithHttpInfoAsync(authorization, fiat, country, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<SupportedPaymentTypesCurrencyResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<SupportedPaymentTypesCurrencyResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="fiat"></param>
        /// <param name="country"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportedPaymentTypesCurrencyResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SupportedPaymentTypesCurrencyResponse>> OnRamperGetSupportedPaymentTypesFiatWithHttpInfoAsync(string authorization, string fiat, string country, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorization' when calling OnramperApi->OnRamperGetSupportedPaymentTypesFiat");

            // verify the required parameter 'fiat' is set
            if (fiat == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fiat' when calling OnramperApi->OnRamperGetSupportedPaymentTypesFiat");

            // verify the required parameter 'country' is set
            if (country == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'country' when calling OnramperApi->OnRamperGetSupportedPaymentTypesFiat");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fiat", fiat));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            localVarRequestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<SupportedPaymentTypesCurrencyResponse>("/onramper/payment-types/fiat", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnRamperGetSupportedPaymentTypesFiat", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
