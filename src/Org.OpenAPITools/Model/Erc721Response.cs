/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Erc721Response
    /// </summary>
    [DataContract(Name = "Erc721Response")]
    public partial class Erc721Response : IEquatable<Erc721Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Erc721Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Erc721Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Erc721Response" /> class.
        /// </summary>
        /// <param name="moonScanUrl">moonScanUrl.</param>
        /// <param name="transactionHash">transactionHash (required).</param>
        /// <param name="signedTransaction">signedTransaction (required).</param>
        /// <param name="signedMessage">signedMessage.</param>
        /// <param name="rawTransaction">rawTransaction.</param>
        /// <param name="signature">signature.</param>
        /// <param name="transaction">transaction.</param>
        /// <param name="userOps">userOps.</param>
        /// <param name="useropTransaction">useropTransaction.</param>
        /// <param name="name">name.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="balanceOf">balanceOf.</param>
        /// <param name="ownerOf">ownerOf.</param>
        /// <param name="tokenUri">tokenUri.</param>
        /// <param name="contractAddress">contractAddress.</param>
        /// <param name="isApprovedForAll">isApprovedForAll.</param>
        public Erc721Response(string moonScanUrl = default(string), string transactionHash = default(string), string signedTransaction = default(string), string signedMessage = default(string), string rawTransaction = default(string), string signature = default(string), Dictionary<string, Tx> transaction = default(Dictionary<string, Tx>), List<TransactionRequest> userOps = default(List<TransactionRequest>), string useropTransaction = default(string), string name = default(string), string symbol = default(string), string balanceOf = default(string), string ownerOf = default(string), string tokenUri = default(string), string contractAddress = default(string), string isApprovedForAll = default(string))
        {
            // to ensure "transactionHash" is required (not null)
            if (transactionHash == null)
            {
                throw new ArgumentNullException("transactionHash is a required property for Erc721Response and cannot be null");
            }
            this.TransactionHash = transactionHash;
            // to ensure "signedTransaction" is required (not null)
            if (signedTransaction == null)
            {
                throw new ArgumentNullException("signedTransaction is a required property for Erc721Response and cannot be null");
            }
            this.SignedTransaction = signedTransaction;
            this.MoonScanUrl = moonScanUrl;
            this.SignedMessage = signedMessage;
            this.RawTransaction = rawTransaction;
            this.Signature = signature;
            this.Transaction = transaction;
            this.UserOps = userOps;
            this.UseropTransaction = useropTransaction;
            this.Name = name;
            this.Symbol = symbol;
            this.BalanceOf = balanceOf;
            this.OwnerOf = ownerOf;
            this.TokenUri = tokenUri;
            this.ContractAddress = contractAddress;
            this.IsApprovedForAll = isApprovedForAll;
        }

        /// <summary>
        /// Gets or Sets MoonScanUrl
        /// </summary>
        [DataMember(Name = "moon_scan_url", EmitDefaultValue = false)]
        public string MoonScanUrl { get; set; }

        /// <summary>
        /// Gets or Sets TransactionHash
        /// </summary>
        [DataMember(Name = "transaction_hash", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionHash { get; set; }

        /// <summary>
        /// Gets or Sets SignedTransaction
        /// </summary>
        [DataMember(Name = "signed_transaction", IsRequired = true, EmitDefaultValue = true)]
        public string SignedTransaction { get; set; }

        /// <summary>
        /// Gets or Sets SignedMessage
        /// </summary>
        [DataMember(Name = "signed_message", EmitDefaultValue = false)]
        public string SignedMessage { get; set; }

        /// <summary>
        /// Gets or Sets RawTransaction
        /// </summary>
        [DataMember(Name = "raw_transaction", EmitDefaultValue = false)]
        public string RawTransaction { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name = "signature", EmitDefaultValue = false)]
        public string Signature { get; set; }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name = "transaction", EmitDefaultValue = false)]
        public Dictionary<string, Tx> Transaction { get; set; }

        /// <summary>
        /// Gets or Sets UserOps
        /// </summary>
        [DataMember(Name = "userOps", EmitDefaultValue = false)]
        public List<TransactionRequest> UserOps { get; set; }

        /// <summary>
        /// Gets or Sets UseropTransaction
        /// </summary>
        [DataMember(Name = "userop_transaction", EmitDefaultValue = false)]
        public string UseropTransaction { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets BalanceOf
        /// </summary>
        [DataMember(Name = "balance_of", EmitDefaultValue = false)]
        public string BalanceOf { get; set; }

        /// <summary>
        /// Gets or Sets OwnerOf
        /// </summary>
        [DataMember(Name = "owner_of", EmitDefaultValue = false)]
        public string OwnerOf { get; set; }

        /// <summary>
        /// Gets or Sets TokenUri
        /// </summary>
        [DataMember(Name = "token_uri", EmitDefaultValue = false)]
        public string TokenUri { get; set; }

        /// <summary>
        /// Gets or Sets ContractAddress
        /// </summary>
        [DataMember(Name = "contract_address", EmitDefaultValue = false)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Gets or Sets IsApprovedForAll
        /// </summary>
        [DataMember(Name = "isApprovedForAll", EmitDefaultValue = false)]
        public string IsApprovedForAll { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Erc721Response {\n");
            sb.Append("  MoonScanUrl: ").Append(MoonScanUrl).Append("\n");
            sb.Append("  TransactionHash: ").Append(TransactionHash).Append("\n");
            sb.Append("  SignedTransaction: ").Append(SignedTransaction).Append("\n");
            sb.Append("  SignedMessage: ").Append(SignedMessage).Append("\n");
            sb.Append("  RawTransaction: ").Append(RawTransaction).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  UserOps: ").Append(UserOps).Append("\n");
            sb.Append("  UseropTransaction: ").Append(UseropTransaction).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  BalanceOf: ").Append(BalanceOf).Append("\n");
            sb.Append("  OwnerOf: ").Append(OwnerOf).Append("\n");
            sb.Append("  TokenUri: ").Append(TokenUri).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  IsApprovedForAll: ").Append(IsApprovedForAll).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Erc721Response);
        }

        /// <summary>
        /// Returns true if Erc721Response instances are equal
        /// </summary>
        /// <param name="input">Instance of Erc721Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Erc721Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MoonScanUrl == input.MoonScanUrl ||
                    (this.MoonScanUrl != null &&
                    this.MoonScanUrl.Equals(input.MoonScanUrl))
                ) && 
                (
                    this.TransactionHash == input.TransactionHash ||
                    (this.TransactionHash != null &&
                    this.TransactionHash.Equals(input.TransactionHash))
                ) && 
                (
                    this.SignedTransaction == input.SignedTransaction ||
                    (this.SignedTransaction != null &&
                    this.SignedTransaction.Equals(input.SignedTransaction))
                ) && 
                (
                    this.SignedMessage == input.SignedMessage ||
                    (this.SignedMessage != null &&
                    this.SignedMessage.Equals(input.SignedMessage))
                ) && 
                (
                    this.RawTransaction == input.RawTransaction ||
                    (this.RawTransaction != null &&
                    this.RawTransaction.Equals(input.RawTransaction))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.Transaction == input.Transaction ||
                    this.Transaction != null &&
                    input.Transaction != null &&
                    this.Transaction.SequenceEqual(input.Transaction)
                ) && 
                (
                    this.UserOps == input.UserOps ||
                    this.UserOps != null &&
                    input.UserOps != null &&
                    this.UserOps.SequenceEqual(input.UserOps)
                ) && 
                (
                    this.UseropTransaction == input.UseropTransaction ||
                    (this.UseropTransaction != null &&
                    this.UseropTransaction.Equals(input.UseropTransaction))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.BalanceOf == input.BalanceOf ||
                    (this.BalanceOf != null &&
                    this.BalanceOf.Equals(input.BalanceOf))
                ) && 
                (
                    this.OwnerOf == input.OwnerOf ||
                    (this.OwnerOf != null &&
                    this.OwnerOf.Equals(input.OwnerOf))
                ) && 
                (
                    this.TokenUri == input.TokenUri ||
                    (this.TokenUri != null &&
                    this.TokenUri.Equals(input.TokenUri))
                ) && 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.IsApprovedForAll == input.IsApprovedForAll ||
                    (this.IsApprovedForAll != null &&
                    this.IsApprovedForAll.Equals(input.IsApprovedForAll))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MoonScanUrl != null)
                {
                    hashCode = (hashCode * 59) + this.MoonScanUrl.GetHashCode();
                }
                if (this.TransactionHash != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionHash.GetHashCode();
                }
                if (this.SignedTransaction != null)
                {
                    hashCode = (hashCode * 59) + this.SignedTransaction.GetHashCode();
                }
                if (this.SignedMessage != null)
                {
                    hashCode = (hashCode * 59) + this.SignedMessage.GetHashCode();
                }
                if (this.RawTransaction != null)
                {
                    hashCode = (hashCode * 59) + this.RawTransaction.GetHashCode();
                }
                if (this.Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Signature.GetHashCode();
                }
                if (this.Transaction != null)
                {
                    hashCode = (hashCode * 59) + this.Transaction.GetHashCode();
                }
                if (this.UserOps != null)
                {
                    hashCode = (hashCode * 59) + this.UserOps.GetHashCode();
                }
                if (this.UseropTransaction != null)
                {
                    hashCode = (hashCode * 59) + this.UseropTransaction.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.BalanceOf != null)
                {
                    hashCode = (hashCode * 59) + this.BalanceOf.GetHashCode();
                }
                if (this.OwnerOf != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerOf.GetHashCode();
                }
                if (this.TokenUri != null)
                {
                    hashCode = (hashCode * 59) + this.TokenUri.GetHashCode();
                }
                if (this.ContractAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ContractAddress.GetHashCode();
                }
                if (this.IsApprovedForAll != null)
                {
                    hashCode = (hashCode * 59) + this.IsApprovedForAll.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
